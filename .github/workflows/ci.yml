name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: music_collab_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run backend linting
      run: |
        cd backend
        npm run lint
    
    - name: Run backend tests
      run: |
        cd backend
        npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/music_collab_test
        REDIS_URL: redis://localhost:6379
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:unit -- --coverage --run
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/clover.xml
        flags: frontend
        name: frontend-coverage

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Start Docker services for integration tests
      run: |
        cd dev-tools
        docker compose up -d postgres redis
    
    - name: Wait for services to be ready
      run: |
        # Wait for PostgreSQL to be ready
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60s bash -c 'until docker compose -f dev-tools/docker-compose.yml exec -T postgres pg_isready -U dev_user -d music_collab_dev; do sleep 2; done'
        
        # Wait for Redis to be ready
        echo "Waiting for Redis to be ready..."
        timeout 30s bash -c 'until docker compose -f dev-tools/docker-compose.yml exec -T redis redis-cli -a dev_redis_password ping | grep -q PONG; do sleep 2; done'
        
        echo "✅ Services are ready!"
    
    - name: Verify database setup
      run: |
        # Verify test database exists (created by init script)
        docker compose -f dev-tools/docker-compose.yml exec -T postgres psql -U dev_user -d music_collab_test -c "SELECT 1;"
        echo "✅ Test database is accessible"
    
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://dev_user:dev_password@localhost:5432/music_collab_test
        REDIS_URL: redis://localhost:6379
        REDIS_PASSWORD: dev_redis_password
    
    - name: Stop Docker services
      if: always()
      run: |
        cd dev-tools
        docker compose down -v

  # e2e-test:
  #   runs-on: ubuntu-latest
  #   needs: [backend-test, frontend-test, integration-test, build]
    
  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: music_collab_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
      
  #     redis:
  #       image: redis:7-alpine
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 6379:6379

  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'
  #       cache: 'npm'
  #       cache-dependency-path: |
  #         backend/package-lock.json
  #         frontend/package-lock.json
  #         e2e-tests/package-lock.json
    
  #   - name: Install dependencies
  #     run: |
  #       cd backend && npm ci
  #       cd ../frontend && npm ci
  #       cd ../e2e-tests && npm ci
    
  #   - name: Install Playwright Browsers
  #     run: |
  #       cd e2e-tests
  #       npx playwright install --with-deps
    
  #   - name: Run E2E tests
  #     run: |
  #       cd e2e-tests
  #       npm test
  #     env:
  #       NODE_ENV: test
  #       DATABASE_URL: postgresql://postgres:postgres@localhost:5432/music_collab_test
  #       REDIS_URL: redis://localhost:6379
    
  #   - name: Upload E2E test results
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: playwright-report
  #       path: e2e-tests/playwright-report/
  #       retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: Install and build backend
      run: |
        cd backend
        npm ci
        npm run build
    
    - name: Install and build frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          frontend/dist/
        retention-days: 7

  # code-quality:
  #   runs-on: ubuntu-latest
  #   needs: [backend-test, frontend-test, integration-test]
    
  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: music_collab_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
      
  #     redis:
  #       image: redis:7-alpine
  #       options: >-
  #         --health-cmd "redis-cli ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 6379:6379
    
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0  # Needed for SonarCloud
    
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'
  #       cache: 'npm'
  #       cache-dependency-path: |
  #         backend/package-lock.json
  #         frontend/package-lock.json
    
  #   - name: Install dependencies
  #     run: |
  #       cd backend && npm ci
  #       cd ../frontend && npm ci
    
  #   - name: Run backend coverage tests
  #     run: |
  #       cd backend
  #       npm run test:coverage
  #     env:
  #       NODE_ENV: test
  #       DATABASE_URL: postgresql://postgres:postgres@localhost:5432/music_collab_test
  #       REDIS_URL: redis://localhost:6379
    
  #   - name: Run frontend coverage tests
  #     run: |
  #       cd frontend
  #       npm run test:unit -- --coverage --run
    
  #   - name: SonarCloud Scan
  #     uses: SonarSource/sonarcloud-github-action@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     with:
  #       args: >
  #         -Dsonar.projectKey=music-collab-platform
  #         -Dsonar.organization=your-org
  #         -Dsonar.sources=backend/src,frontend/src
  #         -Dsonar.tests=backend/src,frontend/src
  #         -Dsonar.test.inclusions=**/*.test.ts,**/*.spec.ts
  #         -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
  #         -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/coverage/**
    
  #   - name: Check for security vulnerabilities
  #     run: |
  #       cd backend && npm audit --audit-level high
  #       cd ../frontend && npm audit --audit-level high
    
  #   - name: Check bundle size (frontend)
  #     run: |
  #       cd frontend
  #       npm run build
  #       # Check if bundle size is reasonable (under 1MB for main chunk)
  #       find dist/assets -name "*.js" -exec ls -lh {} \; | awk '{if ($5 > "1M") exit 1}'
